
Using the EZX graphics-maker package (notes compiled by derek, any
questions to him):

1) Copy the following files from /var/home/ml/derek/EZX to a directory
that you want to use for developing your application:

EZX11.h
makefile
app.c

2) Decide what you want to call your application.  By default, it
will be called 'app'.  If you want to change this to, say, 'robot', do
the following:
  
  * mv app.c robot.c

  * edit the makefile.  One line in it says:
      APP      = app
    change the 'app' [just the lower-case one!] to 'robot'

3) Change the .c file to do what you want.  See below for some notes on
doing this.

4) Type 'make'  when it's done, run your program.

Writing programs using EZX:

* There is a variable declaration line:
   EZXW_p w1;
  If you want to use more than one window in your application, add
  more to this line, e.g.
   EZXW_p w1, w2, w3;

* Note how the windows are created:
   w1 = EZX_MakeWindow("hello, bob!", 200, 200, NULL, background_color);
  'w1' is used from this point on to refer to the window just created.
  The arguments to this function are as follows:
    Title -- character string -- what appears in the window's title
    Width, Height -- integers
    Position -- just use NULL
    color -- the color to be used for the background

* You must take care that your program does not exit prematurely
  (see app.c for one way to do this)

Now, you are free to use the graphics functions as part of your
C program.  In the following, 'w' refers to the value returned by
a call to EZX_MakeWindow.

Available functions:

IMPORTANT CONFUSING FUNCTION FIRST:
  EZX_Flush()
    Drawing commands are not executed until this function is called;
      when you want the display to be updated, call this function.

EZX_EndWindow(w)
  Closes down the specified window

EZX_ClearWindows(w)
  Erases the specified window

EZX_SetColor(color)
  Sets the current color to that specified.
  'color' should be one of: C_WHITE, C_BLACK, C_RED, C_LAWNGREEN,
    C_BLUE, C_YELLOW, C_GOLD, C_VIOLET, C_PINK, C_GREY
  This function does not return a value

EZX_GetCursor(x, y)
int *x, *y;
  Waits for a mouse button to be pressed and then fills in the x and y
   parameters with the coordinates.
  Returns LEFT_BUTTON, MIDDLE_BUTTON, or RIGHT_BUTTON, depending on
    which button was pressed

EZX_GetWindowCursor(w, x, y)
int *x, *y;
  Same as EZX_GetCursor, but waits for the click to occur in the
    specified window.


EZX_TestGetCursor(x, y)
int *x, *y;
  Same as EZX_GetCursor, but it doesn't wait (it returns immediately).
  If a button is not being pressed, it  returns -1.

EZX_TestGetWindowCursor(w, x, y)
int *x, *y;
  Same as EZX_TestGetCursor, but only checks the specified window.

EZX_GetKey(cp)
char *cp;
  Waits for a key to be pressed and then fills in the character buffer
  pointed to by cp with the ASCII representation of that key.  The buffer
  pointed to by cp should probably be several characters long.  This
  function returns the number of characters written into cp (which
  could be zero, so be careful).

EZX_GetWindowKey(w, cp)
char *cp;
  Same as EZX_GetKey except that the keypress must come from the specified
    window.

EZX_TestGetKey(cp)
char *cp;
  Same as EZX_GetKey, but doesn't wait (returns immediately).  If
  no key was pressed since last call, it returns -1.

EZX_TestGetWindowKey(w, cp)
char *cp;
  Same as EZX_TestGetKey, but only checks the specified window.

EZX_GetCursors(xp, yp, xr, yr)
int *xp, *yp, *xr, *yr;
  Same as EZX_GetCursor, but it gets two mouse positions -- one where
   the button was pressed (xp, yp), and one where it was released(xr, yr).

EZX_ClearRectangle(w, left, top, width, height)
int left, top, width, height;
  Clear the window area starting at coordinates (left, top) of size
    (width, height)

EZX_SetLineWidth(width)
int width;
  Set the current line width to the specified value

EZX_SetLineStyle(style)
  Set the current line style to the specified value.  'style' should
    be one of:
      LineSolid, LineOnOffDash, LineDoubleDash

EZX_DrawPoint(w, x, y)
int x, y;
  Draw a point at the coordinates (x, y) in the current color

EZX_DrawLine(w, x1, y1, x2, y2)
int x1, y1, x2, y2;
  Draw a line from the coordinates (x1, y1) to (x2, y2) in the current color
    and current line modes

EZX_DrawRectangle(w, x, y, width, height)
int x, y, width, height;
  Draw a non-filled rectangle whose upper-left corner is at (x, y) with
    size (width, height) in the current color with the current line modes

EZX_FillRectangle(w, x, y, width, height)
int x, y, width, height
  Same as EZX_DrawRectangle, except the box is filled

EZX_DrawCircle(w, x, y, r)
int x, y, r;
  Draw a non-filled circle whose center is at (x, y) and whose radius
    is r, in the current color with the current line modes

EZX_FillCircle(w, x, y, width, height)
int x, y, width, height
  Same as EZX_DrawCircle, except it is filled

EZX_DrawPolygon(w, npoints, x, y)
int npoints, x[], y[];
  Draw a polygon.  The x and y parameters are arrays of coordinate
   values, and npoints is the number of vertices.  The current
   color and line modes are used

EZX_FillPolygon(w, npoints, x, y)
int npoints, x[], y[];
  Just like EZX_DrawPolygon, except the polygon is filled.

EZX_DrawGrey(w, x, y, g)
int x, y, g;
  This function draws a little box at the location x,y with a "grey"
  shade (g) between 0 and 63.

EZX_UseFont(theGC, name)
char *name;
  Sets the font to the one named by the string 'name'.  e.g. "6x10".
  When using this function, you must type 'theGC' as the first
    argument; never mind what it means.

EZX_DrawString(w, x, y, string)
int x, y;
char *string;
  Draw the specified string starting at the coordinates (x, y).  The
   text is drawn in the current color, using the current font.

EZX_DrawText(w, x, y, string)
int x, y;
char *string;
  Just like EZX_DrawString, except it erases whatever is underneath the
    text before drawing it.

EZX_DrawStringAt(w, x, y, string, style)
int x, y;
char *string;
char style;
  Just like EZX_DrawString, except the 'style' should be one of the
   following:
     'C' Center the text around the specified point
     'L' Left-justify the text at the specified point
     'R' Right-justify the text to the specified point

EZX_DrawTextAt(w, x, y, string, style)
int x, y;
char *string;
char style;
  Just like EZX_DrawText, except the 'style' should be one of the
   following:
     'C' Center the text around the specified point
     'L' Left-justify the text at the specified point
     'R' Right-justify the text to the specified point

EZX_GetFontHeight()
  Returns the height of the currently-selected font

EZX_GetTextWidth(string)
char *string;
  Returns the width of the specified string in the currently-selected font.

