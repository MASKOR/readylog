/* ***************************************************************************
 *  ,=³ .%%% %%%%%%%. .%%%%%.  .%%%%%.   %%%%%.%%. %. %%%%%%%% %% Rheinisch-
 * [==].%%%   %%   %% %%   %%  %%   %%   %%  %%'%%.%%.%% %% %% %% Westfälische
 *  //l%%%    %%   %% %%%%. ' %%       @ %%%%%' '%%%%%%% %% %%%%% Technische
 * [==]%%     %%|=%%   %%=>%  %%         %%  %%  '%%'%%% %% %% %% Hochschule
 * [==]%%%    %%   %% . '%%%% %%  '%%%   %%   %%  '% '%% %% %% %% Aachen
 * [==]'%%%   %%   %% %%   %%  %%   %%   http://kbsg.rwth-aachen.de/
 * o^^o '%%% %%%%%%%' '%%%%%'O '%%%%%'   Knowledge Based Systems Group
 * ***************************************************************************
 *
 *           $Id: language_processing.pl 2010-07-19 10:08
 *        author: Niklas Hoppe <niklas.hoppe@rwth-aachen.de>
 *   description: Language processing in the Maze domain.
 *
 * ************************************************************************ */

:- write(" --> loading language_processing.pl ... \n").

pue(U) :- process_utterance_external(U,_).
process_utterance_external("quit",[say('quitting')]).
process_utterance_external(U,[
				processed_utterance,
				waitForUtterance(Utterance),
				?( process_utterance(Utterance) = AS ),
				AS
			]) :- split_string(U," ","",Phrase), writeln(Phrase), parse_utterance(Essence,Phrase,[]), writeln(Essence).

parse_utterance(E) --> question(E).
parse_utterance(E) --> imperative(E).
parse_utterance(E) --> statement(E).
parse_utterance([E1,E2]) --> parse_utterance(E1), ["and"], parse_utterance(E2).
question([question,E]) --> verb(E1), noun_phrase(E2), courtesy(E3), verb_phrase(E4), {append(E1,E2,EPrime), append(E3,E4,EPrimePrime), append(EPrime,EPrimePrime,E)}.
%imperative([command,E]) --> verb(E1), noun_phrase(E2), courtesy(E3), object_phrase(E4), {append(E1,E2,EPrime), append(E3,E4,EPrimePrime), append(EPrime,EPrimePrime,E)}.
imperative([command,E]) --> courtesy(E1), verb_phrase(E2), {append(E1,E2,E)}.
statement([statement,E]) --> noun_phrase(E1), verb_phrase(E2), {append(E1,E2,E)}.
statement([statement,E]) --> noun_phrase(E).

noun_phrase([]) --> ["i"].
noun_phrase([]) --> ["you"].
noun_phrase([]) --> ["he"].
noun_phrase([]) --> ["she"].
noun_phrase([]) --> ["it"].
noun_phrase([]) --> ["we"].
noun_phrase([]) --> [].

verb_phrase(E) --> verb(E1), object_phrase(E2), {append(E1,E2,E)}.

verb([go]) --> ["go"].
verb([go]) --> ["move"].
verb([go]) --> ["navigate"].
verb([go]) --> ["walk"].
verb([go]) --> ["run"].
verb([]) --> ["can"].
verb([]) --> ["are"].
%verb([unknown]) --> [_].

object_phrase(E) --> ["the"], object(E).
object_phrase([E]) --> object(E).
object_phrase([E1|E2]) --> object(E1), object_phrase(E2).
object(E) --> toLocation(E).
object(E) --> fromLocation(E).
object(E) --> location(E).
object(E) --> collectableObject(E).
object(E) --> unknown(E).

unknown([unknown]) --> [_].
unknown([unknown]) --> ["the", _].
unknown([unknown]) --> ["the", _, _].

toLocation([toLoc|E]) -->  ["to"], location(E).
toLocation([toLoc|E]) -->  ["to"], unknown(E).
fromLocation([fromLoc|E]) -->  ["from"], location(E).
fromLocation([fromLoc|E]) -->  ["from"], unknown(E).
location([kitchen]) --> ["the", "kitchen"].
location([living_room]) --> ["the", "living", "room"].
location(E) --> unknown(E).

collectableObject([ball]) --> ["ball"].
collectableObject([cup]) --> ["cup"].

courtesy([]) --> ["please"].
courtesy([]) --> [].

:- write(" <-- loading language_processing.pl done.\n").
