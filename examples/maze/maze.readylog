/* ***************************************************************************
 *  ,=³ .%%% %%%%%%%. .%%%%%.  .%%%%%.   %%%%%.%%. %. %%%%%%%% %% Rheinisch-
 * [==].%%%   %%   %% %%   %%  %%   %%   %%  %%'%%.%%.%% %% %% %% Westfälische
 *  //l%%%    %%   %% %%%%. ' %%       @ %%%%%' '%%%%%%% %% %%%%% Technische
 * [==]%%     %%|=%%   %%=>%  %%         %%  %%  '%%'%%% %% %% %% Hochschule
 * [==]%%%    %%   %% . '%%%% %%  '%%%   %%   %%  '% '%% %% %% %% Aachen
 * [==]'%%%   %%   %% %%   %%  %%   %%   http://kbsg.rwth-aachen.de/
 * o^^o '%%% %%%%%%%' '%%%%%'O '%%%%%'   Knowledge Based Systems Group
 * ***************************************************************************
 *
 *           $Id$
 *        author: Stefan Schiffer <schiffer@cs.rwth-aachen.de>
 *   description: Definition of the MAZE domain in ReadyLog
 *
 * ************************************************************************ */

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%                                                                    %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  DOMAIN DEFINITION                   %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% %%%%%%%%%%%%%%%%%%%%%%%%
%%  WORLD
world(1,1,5,5).

is_pos(X, Y) :-
      world( XMin, YMin, XMax, YMax ),
      X >= XMin, X =< XMax, Y >= YMin, Y =< YMax.

function(f_is_pos(X, Y), V, 
         lif(and([ world(XMin,YMin,XMax,YMax),
                   X >= XMin, X =< XMax, Y >= YMin, Y =< YMax ]),
             V=true, V=false)).

%% %%%%%%%%%%%%%%%%%%%%%%%%
%%  WALLS
wall(1,1,1,2).
wall(2,1,3,1).
wall(2,2,3,2).
wall(2,2,2,3).
wall(3,3,4,3) :- !. % last wall has to be cut for visualization
                    % to prevent getting stuck in the below term
%% generate walls at border of maze:
%% maybe unnecessary if is_pos is used everywhere.
wall(Xfrom,Yfrom,Xto,Yto) :- 
      %printf(" - testing wall(%w,%w,%w,%w) \n", [Xfrom,Yfrom,Xto,Yto]), 
      %maze(XM,YM),
      world(XMin,YMin,XMax,YMax),
      ( Xfrom = XMin, Xto = XMin-1 );
      ( Yfrom = YMin, Yto = YMin-1 );
      ( Xfrom = XMax, Xto = XMax+1 );
      ( Yfrom = YMax, Yto = YMax+1 ).

is_wall(Xfrom, Yfrom, Xto, Yto) :-
      wall(Xfrom, Yfrom, Xto, Yto);
      wall(Xto, Yto, Xfrom, Yfrom).

function(f_is_wall(Xfrom, Yfrom, Xto, Yto), V, 
         lif( or([ wall(Xfrom, Yfrom, Xto, Yto),
                   wall(Xto, Yto, Xfrom, Yfrom)]),
              V=true, V=false)).

%% %%%%%%%%%%%%%%%%%%%%%%%%
%%  ACCESS FUNCTIONS

/** get domain info for visualization.
 * compile a list of information on the domain we act in
 */
get_domain(X, Y, W) :-
	world(_, _, X, Y),
	findall([A, B, C, D], wall(A, B, C, D), W).


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  PRIMITIVE FLUENTS                   %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  each prim_fluent is followed 
%%  by its intial value

prim_fluent( pos ).
initial_val( pos, [1,1] ).

prim_fluent( visited(_X,_Y) ).
initial_val( visited( X, Y) ) :- has_val(pos, V, [s0]), V = [X,Y].

% prim_action( set_visited(_X,_Y) ).
% poss( set_visited(_X,_Y), true ).
% %causes_val( set_visited(X,Y), visited(X,Y), visited(X,Y), true ) :- !.
% causes_val( set_visited(X,Y), visited(X,Y), V, V = visited(X,Y) ) :- !.

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  OTHER FLUENTS                       %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
exog_prim_fluent( pos ).
exog_fluent_getValue( pos, V, _S ) :-
	getval(real_pos, V).


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  PRIMITIVE ACTIONS                   %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  each prim_action is followed 
%%  by its precondition axiom
%%  and by its causes_val statement

prim_action(g).
poss(g, true).
causes_val(g, pos, V, V=[2,2]).


prim_action(go_up).
poss(go_up, 
     and([ pos = [X,Y],
           is_pos(X,Y),
           Y2 is Y + 1,
           is_pos(X,Y2),
           not is_wall(X,Y,X,Y2)
         %f_is_wall(X,Y,X,Y2)=false 
         ]) 
    ).
% and([ pos = [X,Y], X=1, Y=1,  f_is_pos(X, Y), Y2 = Y + 1, f_is_pos(X, Y2) ,
%       f_is_wall(X, Y, X, Y2)=true])).

causes_val(go_up, pos, L, 
           and([ pos=[X,Y],
                 Y2 = Y+1,
                 L=[X,Y2]
               ]) 
          ).%:- printf("%w\n", [L]), read(X).
causes_val(go_up, visited(X,Y), true, 
           and([ pos=[X,Y],
                 Y2 = Y+1,
                 visited(X,Y2)
               ])
          ).

prim_action(go_down).
poss(go_down, and([ pos = [X,Y],
                    is_pos(X,Y),
                    Y2 is Y - 1,
                    is_pos(X,Y2),
                    not is_wall(X,Y,X,Y2) 
                  ] ) 
    ).
causes_val(go_down, pos, L, 
           and([ pos=[X,Y], 
                 Y2 = Y-1, 
                 L=[X,Y2]
               ])
          ).

prim_action(go_right).
poss(go_right, and( [ pos = [X,Y],
                      is_pos(X,Y),
                      X2 is X + 1,
                      is_pos(X2,Y),
                      not is_wall(X,Y,X2,Y) 
                    ] ) 
    ).
causes_val(go_right, pos, L, 
           and([ pos=[X,Y],
                 X2 = X+1,
                 L=[X2,Y] 
               ])
          ).

prim_action(go_left).
poss(go_left, and([ pos = [X,Y],
                     is_pos(X,Y),
                     X2 is X - 1,
                     is_pos(X2,Y),
                     not is_wall(X,Y,X2,Y) 
                  ]) 
    ).
causes_val(go_left, pos, L, 
           and([ pos=[X,Y],
                 X2 = X-1,
                 L=[X2,Y]
               ])
          ).

prim_action(rest).
poss(rest, and([ pos = [X,Y],
                 is_pos(X,Y) 
               ]) 
    ).


prim_action(noop).
poss(noop, true ).




%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  READYLOG ACTIONS                    %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% %%%%%%%%%%%%%%%%%%%%%%%%
%% DETERMINISTIC
%% %%%%%%%%%%%%%%%%%%%%%%%%

%% right %%%%%%%%%%%%%%%%%%
proc( right_det,
      go_right
%      [send(action,go_right),
%       ?(action=nil)] 
    ).

proc_poss(right_det, true ).
/*          and([ pos = [X,Y],
                is_pos(X,Y),
                X2 is X + 1,
                is_pos(X2,Y),
                not is_wall(X,Y,X2,Y)
              ]) 
         ).
*/
proc_costs( right_det, 1, true).
proc_model( right_det, go_right ).

%% left %%%%%%%%%%%%%%%%%%%
proc( left_det,
      go_left
%      [send(action,go_left),
%       ?(action=nil)] 
    ).

proc_poss( left_det, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  X2 is X - 1,
                  is_pos(X2,Y),
                  not is_wall(X,Y,X2,Y) ] ) 
         ).
proc_costs( left_det, 1, true).
proc_model( left_det, go_left ).

%% down %%%%%%%%%%%%%%%%%%%
proc( down_det,
      go_down
%      [send(action,go_down),
%       ?(action=nil)]
      ).

proc_poss( down_det, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  Y2 is Y - 1,
                  is_pos(X,Y2),
                  not is_wall(X,Y,X,Y2) ] ) 
         ).
proc_costs( down_det, 1, true).
proc_model( down_det, go_down ).

%% up %%%%%%%%%%%%%%%%%%%%%
proc( up_det,
      go_up
%      [send(action,go_up),
%       ?(action=nil)] 
      ).

proc_poss( up_det, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  Y2 is Y + 1,
                  is_pos(X,Y2),
                  not is_wall(X,Y,X,Y2) ] ) 
         ).
proc_costs( up_det, 1, true).
proc_model( up_det, go_up ).


%% %%%%%%%%%%%%%%%%%%%%%%%%
%%  STOCHASTIC
%% %%%%%%%%%%%%%%%%%%%%%%%%

%% right %%%%%%%%%%%%%%%%%%
proc( right_st,
      go_right
%      [send(action,go_right),
%       ?(action=nil)] 
    ).

proc_poss(right_st,
          and([ pos = [X,Y],
                is_pos(X,Y),
                X2 is X + 1,
                is_pos(X2,Y),
                not is_wall(X,Y,X2,Y)
              ]) 
         ).
proc_costs( right_st, 1, true).
proc_model( right_st, 
            [
               ?( pos = [PosX,PosY] ),
               ?( NewX is PosX + 1 ),
               sprob([ (go_right, 0.5, pos=[NewX,PosY]),
                       (noop, 0.5, pos=[PosX,PosY])
                     ], exogf_Update )
            ]
          ).

%% left %%%%%%%%%%%%%%%%%%%
proc( left_st,
      go_left
%      [send(action,go_left),
%       ?(action=nil)] 
    ).

proc_poss( left_st, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  X2 is X - 1,
                  is_pos(X2,Y),
                  not is_wall(X,Y,X2,Y) ] ) 
         ).
proc_costs( left_st, 1, true).
proc_model( left_st, 
            [
               ?( pos = [PosX,PosY] ),
               ?( NewX is PosX - 1 ),
               sprob([ (go_left, 0.5, pos=[NewX,PosY]),
                       (noop, 0.5, pos=[PosX,PosY])
                     ], exogf_Update )
            ]
          ).

%% down %%%%%%%%%%%%%%%%%%%
proc( down_st,
      go_down
%      [send(action,go_down),
%       ?(action=nil)]
      ).

proc_poss( down_st, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  Y2 is Y - 1,
                  is_pos(X,Y2),
                  not is_wall(X,Y,X,Y2) ] ) 
         ).
proc_costs( down_st, 1, true).
proc_model( down_st,
            [
               ?( pos = [PosX,PosY] ),
               ?( NewY is PosY - 1 ),
               sprob([ (go_down, 0.5, pos=[PosX,NewY]),
                       (noop, 0.5, pos=[PosX,PosY])
                     ], exogf_Update )
            ]
          ).

%% up %%%%%%%%%%%%%%%%%%%%%
proc( up_st,
      go_up
%      [send(action,go_up),
%       ?(action=nil)] 
      ).

proc_poss( up_st, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  Y2 is Y + 1,
                  is_pos(X,Y2),
                  not is_wall(X,Y,X,Y2) ] ) 
         ).
proc_costs( up_st, 1, true).
proc_model( up_st,
            [
               ?( pos = [PosX,PosY] ),
               ?( NewY is PosY + 1 ),
               sprob([ (go_up, 0.5, pos=[PosX,NewY]),
                       (noop, 0.5, pos=[PosX,PosY])
                     ], exogf_Update )
            ]
          ).

%% sensePos %%%%%%%%%%%%%%%
%proc( sensePos,
%      [send(action,sensePos),
%       ?(action=nil)] ).

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  EXOGENOUS ACTIONS                   %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

exog_action(teleport(_X,_Y)).
poss(teleport(_X,_Y), true).
causes_val(teleport(X,Y), pos, V, 
           V=[X,Y]
          ).


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% prim_actions for debug output.

prim_action( cout( _Text ) ).
poss( cout( _Text ), true ).

prim_action( cout( _Text, _Params ) ).
poss( cout( _Text, _Params ), true ).

prim_action( cout( _Color, _Text, _Params ) ).
poss( cout( _Color, _Text, _Params ), true ).

prim_action( printf( _String, _Params ) ).
poss( printf( _String, _Params ), true ).

prim_action( printf(_Stream, _String, _Params ) ).
poss( printf(_Stream, _String, _Params ), true ).

