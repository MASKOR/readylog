/* ***************************************************************************
 *  ,=³ .%%% %%%%%%%. .%%%%%.  .%%%%%.   %%%%%.%%. %. %%%%%%%% %% Rheinisch-
 * [==].%%%   %%   %% %%   %%  %%   %%   %%  %%'%%.%%.%% %% %% %% Westfälische
 *  //l%%%    %%   %% %%%%. ' %%       @ %%%%%' '%%%%%%% %% %%%%% Technische
 * [==]%%     %%|=%%   %%=>%  %%         %%  %%  '%%'%%% %% %% %% Hochschule
 * [==]%%%    %%   %% . '%%%% %%  '%%%   %%   %%  '% '%% %% %% %% Aachen
 * [==]'%%%   %%   %% %%   %%  %%   %%   http://kbsg.rwth-aachen.de/
 * o^^o '%%% %%%%%%%' '%%%%%'O '%%%%%'   Knowledge Based Systems Group
 * ***************************************************************************
 *
 *           $Id: agent.readylog 68 2007-12-06 18:30:15Z stf $
 *        author: Daniel Beck <beck@kbsg.rwth-aachen.de>
 *   description: application of ReadyLog in the Maze domain.
 *
 * ************************************************************************ */

:- write(" --> loading agent.readylog ...\n").

%:- lib(toplevel).
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  INCLUDES                            %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% ReadyLog interpreter
:- ensure_loaded("../../interpreter/readylog/readylog.pl").
%% eXogenous stuff
:- ensure_loaded("exog.readylog").

%% MazeDomain definition
:- ensure_loaded("fng.readylog").
%% Functions
%:- ensure_loaded("functions.readylog").


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  LIBRARIES                           %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% GridVisualization
:- load("../../ecl/keyboard.so").
:- ["../../include/keyboard.pl"].
%% GridVisualization
:- load("../../ecl/gridvis.so").
:- ["../../include/gridvis.pl"].

      
%% ================================================================== %%
%%  PROCEDURES                                                        %%
%% ================================================================== %%

proc( step_right, [goto_prim(1, 0)] ).

proc( fng, 
      [ 
         cout( blue, " ***** proc fng ***** \n", []),
         %
         while( true ,
                follow 
              )
      ] 
    ).

proc( follow, 
      [ 
         cout( blue, " ***** proc follow ***** \n", []),
         exogf_Update,
         ?( epf_sense_human = SenseHuman ),
         if( neg(epf_sense_human = 0),
             [
                cout( blue, " --- Can Sense Human at %w \n", [SenseHuman]),
                ?( epf_sense_human = [HumanX,HumanY] ),
                cout( blue, " --- Computing GoRelX \n", []),
                if( and([HumanX = 0]) ,
                    [  cout( blue, " --- HumanX = 0 \n", []),
                       ?( GoRelX = HumanX ) ],
                    % else
                    [ cout( blue, " --- HumanX != 0 \n", []),
                      if( and([ HumanX < 0 ]),
                          ?( GoRelX is HumanX + 1),
                          ?( GoRelX is HumanX - 1)) ] ),
                cout( blue, " --- Computing GoRelY \n", []),
                if( and([HumanY = 0]),
                    [ cout( blue, " --- HumanY = 0 \n", []),
                      ?( GoRelY = HumanY )],
                    % else
                    [ cout( blue, " --- HumanY != 0 \n", []),
                      if( and([HumanY < 0 ]),
                          ?( GoRelY is HumanY + 1),
                          ?( GoRelY is HumanY - 1) ) ] ),
                cout( blue, " --- Going to Rel(%w,%w) \n", [GoRelX,GoRelY]),
                goto_prim( GoRelX,GoRelY )                              
             ],
             %% else
             [
                cout( blue, " --- Can NOT Sense Human (%w) \n", [SenseHuman]),
                noop 
             ]
           ), %% endif
         cout( blue, " ***** proc follow done ***** \n", [])
      ] 
    ).
