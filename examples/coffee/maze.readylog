/* ***************************************************************************
 *  ,=³ .%%% %%%%%%%. .%%%%%.  .%%%%%.   %%%%%.%%. %. %%%%%%%% %% Rheinisch-
 * [==].%%%   %%   %% %%   %%  %%   %%   %%  %%'%%.%%.%% %% %% %% Westfälische
 *  //l%%%    %%   %% %%%%. ' %%       @ %%%%%' '%%%%%%% %% %%%%% Technische
 * [==]%%     %%|=%%   %%=>%  %%         %%  %%  '%%'%%% %% %% %% Hochschule
 * [==]%%%    %%   %% . '%%%% %%  '%%%   %%   %%  '% '%% %% %% %% Aachen
 * [==]'%%%   %%   %% %%   %%  %%   %%   http://kbsg.rwth-aachen.de/
 * o^^o '%%% %%%%%%%' '%%%%%'O '%%%%%'   Knowledge Based Systems Group
 * ***************************************************************************
 *
 *           $Id: maze.readylog 68 2007-12-06 18:30:15Z stf $
 *        author: Stefan Schiffer <schiffer@cs.rwth-aachen.de>
 *   description: Definition of the MAZE domain in ReadyLog
 *
 * ************************************************************************ */

:- write(" --> loading maze.readylog ... \n").

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  DOMAIN DEFINITION                                                 %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  DOMAIN DEFINITION                   %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% %%%%%%%%%%%%%%%%%%%%%%%%
%%  WORLD
world(1,1,5,5).

is_pos(X, Y) :-
      world( XMin, YMin, XMax, YMax ),
      X >= XMin, X =< XMax, Y >= YMin, Y =< YMax.

function(f_is_pos(X, Y), V, 
         lif(and([ world(XMin,YMin,XMax,YMax),
                   X >= XMin, X =< XMax, Y >= YMin, Y =< YMax ]),
             V=true, V=false)).

%% %%%%%%%%%%%%%%%%%%%%%%%%
%%  WALLS
wall(1,1,1,2).
wall(2,1,3,1).
wall(2,2,3,2).
wall(2,2,2,3).
wall(3,3,4,3) :- !. % last wall has to be cut for visualization
                    % to prevent getting stuck in the below term
%% generate walls at border of maze:
%% maybe unnecessary if is_pos is used everywhere.
wall(Xfrom,Yfrom,Xto,Yto) :- 
      %printf(" - testing wall(%w,%w,%w,%w) \n", [Xfrom,Yfrom,Xto,Yto]), 
      world(XMin,YMin,XMax,YMax),
      ( Xfrom = XMin, Xto = XMin-1 );
      ( Yfrom = YMin, Yto = YMin-1 );
      ( Xfrom = XMax, Xto = XMax+1 );
      ( Yfrom = YMax, Yto = YMax+1 ).

is_wall(Xfrom, Yfrom, Xto, Yto) :-
      wall(Xfrom, Yfrom, Xto, Yto);
      wall(Xto, Yto, Xfrom, Yfrom).

function(f_is_wall(Xfrom, Yfrom, Xto, Yto), V, 
         lif( or([ wall(Xfrom, Yfrom, Xto, Yto),
                   wall(Xto, Yto, Xfrom, Yfrom)]),
              V=true, V=false)).

%% %%%%%%%%%%%%%%%%%%%%%%%%
%%  ACCESS FUNCTIONS

/** get domain info for visualization.
 * compile a list of information on the domain we act in
 */
get_domain(X, Y, W) :-
	world(_, _, X, Y),
	findall([A, B, C, D], wall(A, B, C, D), W).


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  FLUENTS                                                           %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  PRIMITIVE FLUENTS                   %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  each prim_fluent is followed 
%%  by its intial value

/** the agent's position */
%prim_fluent( pos ).
%initial_val( pos, [1,1] ).

/** has cell X,Y been visited already */
prim_fluent( visited(_X,_Y) ).
initial_val( visited( X, Y), V ) :- 
      getval(real_start_pos, Pos), 
      %printf( " *********************** initial_val-visited(%w,%w) at pos %w \n%b", [X,Y,Pos]),
      ( Pos = [X,Y] -> V = true; V = false).

/** number of visited cells */
prim_fluent( num_visited ).
initial_val( num_visited, V ) :-
      %printf( " *********************** initial_val-num-visited \n", []),
      V = 1.

/** are we carrying the item */
prim_fluent( know_item_pos ).
initial_val( know_item_pos, false ).

/** the item's position */
%prim_fluent( ipos ).
%initial_val( ipos, [] ).

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  EXOGENOUS PRIMITIVE FLUENTS         %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% %%%%%%%%%%%%%%%%%%%%% %%
%%  real position        %%
%% %%%%%%%%%%%%%%%%%%%%% %%

exog_prim_fluent( pos ).
exog_fluent_getValue( pos, V, _S ) :- !,
      %printf(" ::: getval-pos ",[]), 
      getval( wm_agent_pos, V).%,
      %printf(" ... %w \n",[V]).

%% %%%%%%%%%%%%%%%%%%%%% %%
%%  item position        %%
%% %%%%%%%%%%%%%%%%%%%%% %%

exog_prim_fluent(epf_item_pos).
exog_fluent_getValue(epf_item_pos, V, _S) :- !, 
      %printf(" getval-itempos ",[]), 
      getval( wm_item_pos, V ).

/** are we carrying the item */
exog_prim_fluent( epf_carry_item ).
%initial_val( carry_item, false ).
exog_fluent_getValue( epf_carry_item, V, _S ) :- !, getval( wm_carry_item, V).

%% %%%%%%%%%%%%%%%%%%%%% %%
%%  item sensing         %%
%% %%%%%%%%%%%%%%%%%%%%% %%

/** fluent indicating whether we can sense the item.
 */
exog_prim_fluent(epf_sense_item).

/** access function return the fluents value in Situation S.
 * return-value is coord in num-pad-nomenclatur 5 being the own position
 */
exog_fluent_getValue(epf_sense_item, V, S) :- !,
      %printf( " getval epf_sense_item in S: %w\n",[S] ),
      getval( real_item_pos, [XI,YI] ),
      %printf( " -- ItemPos: %w,%w\n",[XI,YI] ),
      getval( real_agent_pos, Pos),
      %has_val(pos,Pos,S),
      Pos = [X,Y],
      %printf( " -- MyPos: %w,%w  ItemPos: %w,%w\n",[X,Y, XI,YI] ),
      Xlower is X-1, Xupper is X+1, XDiff is XI-X,
      Ylower is Y-1, Yupper is Y+1, YDiff is YI-Y,
      %printf( "Xupper %w, Yupper %w, Xlower %w, Ylower %w\n%b",[Xupper,Yupper,Xlower, Ylower] ),
      (
         ( XI::[Xlower..Xupper],YI::[Ylower..Yupper] ) -> 
            V is 5 + XDiff + 3 * YDiff
      ;
            V is 0
      ).%,
      %printf( " ~~~~~~~~~~~~~~~~ ITEMPOSID = %w ~~~~~~~~~~~~~~~~~~~~~ \n%b",[V] ).


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  OTHER FLUENTS                       %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  ACTIONS                                                           %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  PRIMITIVE ACTIONS                   %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  each prim_action is followed 
%%  by its precondition axiom
%%  and by its causes_val statement

%prim_action(g).
%poss(g, true).
%causes_val(g, pos, V, V=[2,2]).

%% %%%%%%%%%%%%%%%%%%%%% %%
%%  MOVEMENT             %%
%% %%%%%%%%%%%%%%%%%%%%% %%

/** go up */
prim_action(go_up).
poss(go_up, 
     and([ pos = [X,Y],
           %writeln([X,Y]),
           is_pos(X,Y),
           Y2 is Y + 1,
           is_pos(X,Y2),
           not is_wall(X,Y,X,Y2)
         ]) 
    ).
causes_val(go_up, pos, L, 
           and([ pos=[X,Y], Y2 is Y+1, L=[X,Y2] ]) %,writeln([pos_up,L]) 
          ).
causes_val(go_up, visited(X,Y), true, 
           % or([ visited(X,Y) ]),
           and([ pos=[Xp,Yp], X = Xp, Y is Yp+1 ]) %,writeln([up,X,Y]) 
          ).
causes_val(go_up, num_visited, V, 
           and([ pos=[Xp,Yp],
                 X = Xp, Y is Yp + 1,
                 lif( visited(X,Y), V = num_visited, V is num_visited+1 )
                 %,writeln([up,V])
               ])
          ).

/** go down */
prim_action(go_down).
poss(go_down, 
     and([ pos = [X,Y],
           %writeln([X,Y]),
           is_pos(X,Y),
           Y2 is Y - 1,
           is_pos(X,Y2),
           not is_wall(X,Y,X,Y2) 
         ] ) 
    ).
causes_val(go_down, pos, L, 
           and([ pos=[X,Y], Y2 is Y-1, L=[X,Y2] ]) %,writeln([pos_down,L])
          ).
causes_val(go_down, visited(X,Y), true, 
           % or([ visited(X,Y) ]),
           and([ pos=[Xp,Yp], X = Xp, Y is Yp-1 ]) %,writeln([down,X,Y]) 
          ).
causes_val(go_down, num_visited, V, 
           and([ pos=[Xp,Yp], X = Xp, Y is Yp-1,
                 lif( visited(X,Y), V = num_visited, V is num_visited+1 )
                 %,writeln([down,V])
               ])
          ).

/** go left */
prim_action(go_left).
poss(go_left, 
     and([ pos = [X,Y],
           %writeln([X,Y]),
           is_pos(X,Y),
           X2 is X - 1,
           is_pos(X2,Y),
           not is_wall(X,Y,X2,Y) 
         ]) 
    ).
causes_val(go_left, pos, L, 
           and([ pos=[X,Y], X2 is X-1, L=[X2,Y] 
                 %,writeln([pos_left,L]) 
               ])
          ).
causes_val(go_left, visited(X,Y), true, 
           % or([ visited(X,Y) ]),
           and([ pos=[Xp,Yp], X is Xp-1, Y = Yp
                 %,writeln([left,X,Y]) 
               ])
          ).
causes_val(go_left, num_visited, V, 
           and([ pos=[Xp,Yp], X is Xp-1, Y = Yp,
                 lif( visited(X,Y), V = num_visited, V is num_visited+1 )
                 %,writeln([left,V])
               ])
          ).

/** go right */
prim_action(go_right).
poss(go_right, 
     and( [ pos = [X,Y],
            %writeln([X,Y]),
            is_pos(X,Y),
            X2 is X + 1,
            is_pos(X2,Y),
            not is_wall(X,Y,X2,Y) 
          ] ) 
    ).
causes_val(go_right, pos, L, 
           and([ pos=[X,Y], X2 is X+1, L=[X2,Y]
                 %,writeln([pos_right,L])
               ])
          ).
causes_val(go_right, visited(X,Y), true, 
           and([ pos=[Xp,Yp], X is Xp+1, Y = Yp
                 %,writeln([right,X,Y])
               ])
          ).
causes_val(go_right, num_visited, V, 
           and([ pos=[Xp,Yp], X is Xp+1, Y = Yp,
                 lif( visited(X,Y), V = num_visited, V is num_visited+1 )
                 %,writeln([right,V])
               ])
          ).

/** do not move */
prim_action(rest).
poss(rest, 
     and([ pos = [X,Y], is_pos(X,Y) ]) 
    ).

%% %%%%%%%%%%%%%%%%%%%%% %%
%%  stochastic versions  %%

/** go up_st */
prim_action(go_up_st).
poss(go_up_st, 
     and([ pos = [X,Y],
           is_pos(X,Y),
           Y2 is Y + 1,
           is_pos(X,Y2),
           not is_wall(X,Y,X,Y2)
         ]) 
    ).
causes_val(go_up_st, pos, L, 
           and([ pos=[X,Y], Y2 = Y+1, L=[X,Y2] ]) 
          ).
causes_val(go_up_st, visited(X,Y), true, 
           % or([ visited(X,Y) ]),
           and([ pos=[Xp,Yp], X = Xp, Y is Yp+1 ])
          ).
causes_val(go_up_st, num_visited, V, 
           and([ pos=[Xp,Yp],
                 X = Xp, Y is Yp+1,
                 lif( visited(X,Y),
                      V is num_visited,
                      V is num_visited+1
                    )
               ])
          ).

/** go down_st */
prim_action(go_down_st).
poss(go_down, and([ pos = [X,Y],
                    is_pos(X,Y),
                    Y2 is Y - 1,
                    is_pos(X,Y2),
                    not is_wall(X,Y,X,Y2) 
                  ] ) 
    ).
causes_val(go_down_st, pos, L, 
           and([ pos=[X,Y], Y2 = Y-1, L=[X,Y2] ])
          ).
causes_val(go_down_st, visited(X,Y), true, 
           % or([ visited(X,Y) ]),
           and([ pos=[Xp,Yp], X = Xp, Y is Yp-1 ])
          ).
causes_val(go_down_st, num_visited, V, 
           and([ pos=[Xp,Yp], X = Xp, Y is Yp-1,
                 lif( visited(X,Y),
                      V is num_visited,
                      V is num_visited+1
                    )
               ])
          ).

/** go left_st */
prim_action(go_left_st).
poss(go_left_st, and([ pos = [X,Y],
                     is_pos(X,Y),
                     X2 is X - 1,
                     is_pos(X2,Y),
                     not is_wall(X,Y,X2,Y) 
                  ]) 
    ).
causes_val(go_left_st, pos, L, 
           and([ pos=[X,Y], X2 = X-1, L=[X2,Y] ])
          ).
causes_val(go_left_st, visited(X,Y), true, 
           % or([ visited(X,Y) ]),
           and([ pos=[Xp,Yp], X is Xp-1, Y = Yp ])
          ).
causes_val(go_left_st, num_visited, V, 
           and([ pos=[Xp,Yp], X is Xp-1, Y = Yp,
                 lif( visited(X,Y),
                      V is num_visited,
                      V is num_visited+1
                    )
               ])
          ).

/** go right_st */
prim_action(go_right_st).
poss(go_right_st, and( [ pos = [X,Y],
                      is_pos(X,Y),
                      X2 is X + 1,
                      is_pos(X2,Y),
                      not is_wall(X,Y,X2,Y) 
                    ] ) 
    ).
causes_val(go_right_st, pos, L, 
           and([ pos=[X,Y], X2 = X+1, L=[X2,Y] ])
          ).
causes_val(go_right_st, visited(X,Y), true, 
           % or([ visited(X,Y) ]),
           and([ pos=[Xp,Yp], X is Xp+1, Y = Yp ])
          ).
causes_val(go_right_st, num_visited, V, 
           and([ pos=[Xp,Yp], X is Xp+1, Y = Yp,
                 lif( visited(X,Y),
                      V is num_visited,
                      V is num_visited+1
                    )
               ])
          ).

%has_val( pos, V, [cout(" === FINISHING FINDUS === "), cout("  positionID = %w" , [IPOS]), go_up, go_up, go_left, go_up, go_right, s0]).

%% %%%%%%%%%%%%%%%%%%%%% %%
%%  ItemManipulation     %%
%% %%%%%%%%%%%%%%%%%%%%% %%

prim_action(pickup_item).
poss( pickup_item, 
      and([ pos = [X,Y],
            is_pos(X,Y),
            getval( real_item_pos, [XI,YI] ), %% 2DO
            X =:= XI, Y =:= YI,
            not epf_carry_item
          ]) 
    ).
causes_val( pickup_item, epf_carry_item, V, V = true ).

prim_action(drop_item).
poss( drop_item, 
      and([ epf_carry_item,
            pos = [X,Y],
            is_pos(X,Y),
            getval( real_item_pos, [XI,YI] ),
            X =:= XI, Y =:= YI
          ]) 
    ).
causes_val( drop_item, epf_carry_item, V, V = false ).

prim_action(noop).
poss(noop, true ).

prim_action(reset_visited).
poss( reset_visited, true ).
causes_val( reset_visited, visited(_,_), V, V = false ).


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  EvENTS                   %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

:- setval( agent_loose_item_enabled,true ).

toggle_agent_item_event :- !,
        getval( agent_loose_item_enabled,Value ),
        (
          Value ->
          writeln("DISABLING agent_loose_item_event"),
          setval(agent_loose_item_enabled,false)
        ;
          writeln("ENABLING agent_loose_item_event"),
          setval(agent_loose_item_enabled,true)
        ).

event_poss( e_loose_item,
            and([
                 getval( agent_loose_item_enabled,true ),
                 epf_carry_item = true
                ])
          ).
event_model( e_loose_item,
             [
              ?(and([
                       CarryItem = epf_carry_item
                    ]) ),
              sprob( [
                      (set(epf_carry_item,false), 0.3, epf_carry_item = false),
                      ([], 0.7, epf_carry_item = true)
                     ], exogf_Update )
             ]
           ).

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  READYLOG ACTIONS                    %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% %%%%%%%%%%%%%%%%%%%%%%%%
%% DETERMINISTIC
%% %%%%%%%%%%%%%%%%%%%%%%%%

%% right %%%%%%%%%%%%%%%%%%
proc( right_det,
      go_right
%      [send(action,go_right),
%       ?(action=nil)] 
    ).

proc_poss(right_det, true ).
/*          and([ pos = [X,Y],
                is_pos(X,Y),
                X2 is X + 1,
                is_pos(X2,Y),
                not is_wall(X,Y,X2,Y)
              ]) 
         ).
*/
proc_costs( right_det, 1, true).
proc_model( right_det, go_right ).

%% left %%%%%%%%%%%%%%%%%%%
proc( left_det,
      go_left
%      [send(action,go_left),
%       ?(action=nil)] 
    ).

proc_poss( left_det, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  X2 is X - 1,
                  is_pos(X2,Y),
                  not is_wall(X,Y,X2,Y) ] ) 
         ).
proc_costs( left_det, 1, true).
proc_model( left_det, go_left ).

%% down %%%%%%%%%%%%%%%%%%%
proc( down_det,
      go_down
%      [send(action,go_down),
%       ?(action=nil)]
      ).

proc_poss( down_det, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  Y2 is Y - 1,
                  is_pos(X,Y2),
                  not is_wall(X,Y,X,Y2) ] ) 
         ).
proc_costs( down_det, 1, true).
proc_model( down_det, go_down ).

%% up %%%%%%%%%%%%%%%%%%%%%
proc( up_det,
      go_up
%      [send(action,go_up),
%       ?(action=nil)] 
      ).

proc_poss( up_det, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  Y2 is Y + 1,
                  is_pos(X,Y2),
                  not is_wall(X,Y,X,Y2) ] ) 
         ).
proc_costs( up_det, 1, true).
proc_model( up_det, go_up ).


%% %%%%%%%%%%%%%%%%%%%%%%%%
%%  STOCHASTIC
%% %%%%%%%%%%%%%%%%%%%%%%%%

%% right %%%%%%%%%%%%%%%%%%
proc( right_st,
      go_right_st
%      [send(action,go_right),
%       ?(action=nil)] 
    ).

proc_poss(right_st,
          and([ pos = [X,Y],
                is_pos(X,Y),
                X2 is X + 1,
                is_pos(X2,Y),
                not is_wall(X,Y,X2,Y)
              ]) 
         ).
proc_costs( right_st, 1, true).
proc_model( right_st, 
            [
               ?( pos = [PosX,PosY] ),
               ?( NewX is PosX + 1 ),
               sprob([ (go_right, 0.5, pos=[NewX,PosY]),
                       (noop, 0.5, pos=[PosX,PosY])
                     ], exogf_Update )
            ]
          ).

%% left %%%%%%%%%%%%%%%%%%%
proc( left_st,
      go_left_st
%      [send(action,go_left),
%       ?(action=nil)] 
    ).

proc_poss( left_st, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  X2 is X - 1,
                  is_pos(X2,Y),
                  not is_wall(X,Y,X2,Y) ] ) 
         ).
proc_costs( left_st, 1, true).
proc_model( left_st, 
            [
               ?( pos = [PosX,PosY] ),
               ?( NewX is PosX - 1 ),
               sprob([ (go_left, 0.5, pos=[NewX,PosY]),
                       (noop, 0.5, pos=[PosX,PosY])
                     ], exogf_Update )
            ]
          ).

%% down %%%%%%%%%%%%%%%%%%%
proc( down_st,
      go_down_st
%      [send(action,go_down),
%       ?(action=nil)]
      ).

proc_poss( down_st, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  Y2 is Y - 1,
                  is_pos(X,Y2),
                  not is_wall(X,Y,X,Y2) ] ) 
         ).
proc_costs( down_st, 1, true).
proc_model( down_st,
            [
               ?( pos = [PosX,PosY] ),
               ?( NewY is PosY - 1 ),
               sprob([ (go_down, 0.5, pos=[PosX,NewY]),
                       (noop, 0.5, pos=[PosX,PosY])
                     ], exogf_Update )
            ]
          ).

%% up %%%%%%%%%%%%%%%%%%%%%
proc( up_st,
      go_up_st
%      [send(action,go_up),
%       ?(action=nil)] 
      ).

proc_poss( up_st, 
           and( [ pos = [X,Y],
                  is_pos(X,Y),
                  Y2 is Y + 1,
                  is_pos(X,Y2),
                  not is_wall(X,Y,X,Y2) ] ) 
         ).
proc_costs( up_st, 1, true).
proc_model( up_st,
            [
               ?( pos = [PosX,PosY] ),
               ?( NewY is PosY + 1 ),
               sprob([ (go_up, 0.5, pos=[PosX,NewY]),
                       (noop, 0.5, pos=[PosX,PosY])
                     ], exogf_Update )
            ]
          ).

%% sensePos %%%%%%%%%%%%%%%
%proc( sensePos,
%      [send(action,sensePos),
%       ?(action=nil)] ).

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  EXOGENOUS ACTIONS                   %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

exog_action(teleport(_X,_Y)).
poss(teleport(_X,_Y), true).
causes_val(teleport(X,Y), pos, V, 
           V=[X,Y]
          ).


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% prim_actions for debug output.

prim_action( cout( _Text ) ).
poss( cout( _Text ), true ).

prim_action( cout( _Text, _Params ) ).
poss( cout( _Text, _Params ), true ).

prim_action( cout( _Color, _Text, _Params ) ).
poss( cout( _Color, _Text, _Params ), true ).

prim_action( printf( _String, _Params ) ).
poss( printf( _String, _Params ), true ).

prim_action( printf(_Stream, _String, _Params ) ).
poss( printf(_Stream, _String, _Params ), true ).


:- write(" <-- loading maze.readylog done.\n").
