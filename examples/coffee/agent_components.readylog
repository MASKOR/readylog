/* ***************************************************************************
 *  ,=³ .%%% %%%%%%%. .%%%%%.  .%%%%%.   %%%%%.%%. %. %%%%%%%% %% Rheinisch-
 * [==].%%%   %%   %% %%   %%  %%   %%   %%  %%'%%.%%.%% %% %% %% Westfälische
 *  //l%%%    %%   %% %%%%. ' %%       @ %%%%%' '%%%%%%% %% %%%%% Technische
 * [==]%%     %%|=%%   %%=>%  %%         %%  %%  '%%'%%% %% %% %% Hochschule
 * [==]%%%    %%   %% . '%%%% %%  '%%%   %%   %%  '% '%% %% %% %% Aachen
 * [==]'%%%   %%   %% %%   %%  %%   %%   http://kbsg.rwth-aachen.de/
 * o^^o '%%% %%%%%%%' '%%%%%'O '%%%%%'   Knowledge Based Systems Group
 * ***************************************************************************
 *
 *           $Id: agent_components.readylog $
 *        author: Andreas Wortmann <andreas.wortmann@rwth-aachen.de>
 *   description: Provides agent components automata and rules about deriving
 *                sit calc primitives from those plus some i/o rules
 *
 * ************************************************************************ */

:- write(" -----> Loading agent_components.readylog \t ... \n").

:- lib( listut ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                      GENERIC RELATIONS ABOUT COMPONENTS                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

causes_val( Act, CompState, L, L = ToState ) :-
    component( C, CompState, _CsWm, _CsReal, _CsIv ),
    edge( C, _FromState, Act, ToState ).
causes_val( Act, CompState, L, L = ToState ) :-
    component( C, CompState, _CsWm, _CsReal, _CsIv ),
    finisher( A, Act ),
    edge( C, _FromState, A, ToState ).
    
%cv :- 
%    component( Cn, C, _, _, _ ),
%    causes_val( A, C, L, L = T ),
%    printEq( 'A', A ), printEq( 'C', C ), printEq( 'T', T ), nl, nl.
    
exog_prim_fluent( Cs ) :- component( _, Cs, _, _, _ ).
exog_fluent_getValue( Cs, V, _S ) :- !, 
    component( _, Cs, CsWM, _, _ ),
    printColor( yellow, " getval( %w )\n", [ Cs ] ),  flush( output ),
    getval( CsWM, V ),
    printColor( yellow, " getval( %w ) = %w\n", [ Cs, V ] ),  flush( output ).


/**
 * path/6
 * Holds if P is a sequence of maintenance actions allowing to transform state S of
 * component C into state G and the length of P is <= |edges|. Here I is the current
 * sequence length and N the boundary.
 */    
path( C, S, G, A, _I, _N ) :- 
    edge( C, S, A, G ), maintenance_action( A ).
path( C, S, G, P, I, N ) :- 
    I < N,
    edge( C, S, A, S1 ), 
    J is I + 1,
    path( C, S1, G, P1, J, N ), 
    P = [ A | P1 ].
    
/**
 * path/4
 * Holds if P is a sequence of maintenance actions allowing to transform state S of
 * component C into state G and the length of P is <= |edges|
 */    
path( C, S, G, P ) :-
    component( C, _Cs, _CsWM, _CsReal, _CsIv ),
    findall( e( C, S0, S1 ), edge( C, S0, _, S1 ), L ),
    remove_dups( L, Edges ),
    length( Edges, N ),
    path( C, S, G, P, 0, N ).
    

program( C, G, H, P ) :-
    component( C, Cs, _CsWM, _CsReal, _Iv ),
    printEq( 'Cs' , Cs ),
    holds( Cs = S, H ),
    printEq( 'S' , S ),
    path( C, S, G, P ), !,
    printEq( 'P' , P ),
    flush(output),
    project( P, H ), !.
    
prg0 :- setval(real_arm_state,arm_idle), setval(wm_arm_state,arm_idle),
    program( arm, arm_moving, [exogf_Update, s0], P ), printEq( 'P', P ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                INITIAL SETUP                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/**
 * setup_components
 * Initializes each components real values with the initial values from their
 * respective definitions
 */
setup_components :- 
    findall( component( _C, _Cs, _CsWM, _CsReal, _CsIv ),
             component( _C, _Cs, _CsWM, _CsReal, _CsIv ),
             Components ),
    setup_components_states( Components ).

setup_components_states( [] ).    
setup_components_states( Components ) :-
    Components = [ Comp | Rest ],
    Comp = component( C, _Cs, _CsWM, CsReal, CsIv ),
    setup_component_value( C, CsReal, CsIv ),
    setup_components_states( Rest ).
    
setup_component_value( C, CsReal, CsIv ) :-
    printColor( green, " *** Initializing component %w: %w = %w\n", [ C, CsReal, CsIv ] ),
	setval( CsReal, CsIv ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            COMPONENT UPDATE CYCLE                            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/**
 * update_components
 * Updates the world model values of every component according to the 
 * component's definition
 */ 
update_components :-
    findall( component( _C, _Cs, _CsWM, _CsReal, _CsIv ),
             component( _C, _Cs, _CsWM, _CsReal, _CsIv ),
             Components ),
    update_component_states( Components ).
    
update_component_states( [] ).
update_component_states( Components ) :-
    Components = [ Comp | Rest ],
    Comp = component( C, _Cs, CsWM, CsReal, _Iv ),
    printColor( green, " *** Updating component %w\n", [ C ] ),
    update_val( CsWM, CsReal ),
    update_component_states( Rest ).
    
%update_val( CsWM, CsReal ) :-
%    getval( CsReal, V ), 
%	printColor( green, " *** update_val: %w = %w\n", [ CsWM, V ] ),
%	setval( CsWM, V ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                  I/O STUFF                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

get_comp_list( L ) :- findall( C, component( C, _, _, _, _ ), L ).

get_comp( Components, I, Comp ) :- listut:nth0( I, Components, Comp ). 
get_comp_state( States, J, State ) :- listut:nth0( J, States, State ). 

get_comp_states( C, L ) :- 
    findall( S, edge( C, S, _, _ ), LOut ),
    findall( T, edge( C, _, _, T ), LIn ),
    append( LOut, LIn, LTot ),
    remove_dups( LTot, L ).
 
printNumberedList( [], _ ) :- !.
printNumberedList( [ C | R ], I ) :-
    (
        component( C, _Cs, _CsWm, CsReal, _CsIv )
      ->
        getval( CsReal, S )
      ;
        (
            nonpreemptive( C, _AWW, AReal )
          ->
            getval( AReal, S )
          ;
            S = 'N/A'
        )        
    ),
    printf( "*** [%w] %w (%w)\n", [ I, C, S ] ),
    J is I + 1,
    printNumberedList( R, J ).

print_components_states( [ ] ) :- !.
print_components_states( [ Comp | R ] ) :-
    component( Comp, _Cs, _CsWm, CsReal, _CsIv ),
    getval( CsReal, V ),
    printColor( yellow, "*** Component '%w' is at state '%w'\n", [ Comp, V ] ),
    print_components_states( R ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            COMPONENT DEFINITIONS                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/**
 * ARM
 */
component( arm, arm_state, wm_arm_state, real_arm_state, arm_idle ).
edge( arm, arm_idle, calibrate, arm_calibrated ). % Komplexe Transition!
edge( arm, arm_calibrated, start_pickup(_X), arm_moving ).
edge( arm, arm_calibrated, start_drop(_X,_R), arm_moving ).
edge( arm, arm_moving, stop_pickup(_X), arm_calibrated ).
edge( arm, arm_moving, stop_drop(_X,_R), arm_calibrated ).

/**
 * COLLI
 */
component( colli, colli_state, wm_colli_state, real_colli_state, colli_off ).
edge( colli, colli_off, start_colli, colli_idle ).
edge( colli, colli_idle, stop_colli, colli_off ).
edge( colli, colli_idle, start_scan, colli_scanning ).
edge( colli, colli_scanning, stop_scan, colli_idle ).
edge( colli, colli_scanning, stop_colli, colli_off ).
edge( colli, colli_defect, stop_colli, colli_off ).
edge( colli, colli_defect, restart_colli, colli_idle ).

% prim_action( start_colli ).
% prim_action( stop_colli ).
% prim_action( restart_colli ).
% poss ( start_colli , colli=idle ).
% todo: colli=idle auswerten

% maintenance_action( start_colli ).
% maintenance_action( stop_colli ).
% maintenance_action( restart_colli ).

/**
 * MOTOR
 */
component( motor, motor_state, wm_motor_state, real_motor_state, motor_off ).
edge( motor, motor_off, start_motor, motor_idle ).
edge( motor, motor_idle, stop_motor, motor_off ).
edge( motor, motor_idle, increase_speed, motor_slow ).
edge( motor, motor_slow, decrease_speed, motor_idle ).
edge( motor, motor_slow, increase_speed, motor_fast ).
edge( motor, motor_slow, stop_motor, motor_off ).
edge( motor, motor_fast, decrease_speed, motor_slow ).
edge( motor, motor_fast, stop_motor, motor_off ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- writeln(" <----- Loading agent_components.readylog \t[DONE]\n").
