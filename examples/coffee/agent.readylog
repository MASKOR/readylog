/* ***************************************************************************
 *  ,=³ .%%% %%%%%%%. .%%%%%.  .%%%%%.   %%%%%.%%. %. %%%%%%%% %% Rheinisch-
 * [==].%%%   %%   %% %%   %%  %%   %%   %%  %%'%%.%%.%% %% %% %% Westfälische
 *  //l%%%    %%   %% %%%%. ' %%       @ %%%%%' '%%%%%%% %% %%%%% Technische
 * [==]%%     %%|=%%   %%=>%  %%         %%  %%  '%%'%%% %% %% %% Hochschule
 * [==]%%%    %%   %% . '%%%% %%  '%%%   %%   %%  '% '%% %% %% %% Aachen
 * [==]'%%%   %%   %% %%   %%  %%   %%   http://kbsg.rwth-aachen.de/
 * o^^o '%%% %%%%%%%' '%%%%%'O '%%%%%'   Knowledge Based Systems Group
 * ***************************************************************************
 *
 *           $Id: agent.readylog 68 2007-12-06 18:30:15Z stf $
 *        author: Andreas Wortmann <andreas.wortmann@rwth-aachen.de>
 *   description: Application of ReadyLog in the Coffee domain.
 *
 * ************************************************************************ */

:- write(" --> loading agent.readylog ...\n").

%:- lib(toplevel).

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  INCLUDES                            %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% ReadyLog interpreter
:- ensure_loaded("../../interpreter/steadylog/readylog.pl").
%% eXogenous stuff
:- ensure_loaded("exog.readylog").

%% CoffeeDomain definition
:- ensure_loaded("coffee.readylog").
%% Agent Components 
:- ensure_loaded("agent_components.readylog").
%% Functions
:- ensure_loaded("functions.readylog").
%% Debugging stuff
:- ensure_loaded("debug.readylog").


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%%  LIBRARIES                           %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% GridVisualization
:- load("../../ecl/keyboard.so").
:- ["../../include/keyboard.pl"].
%% GridVisualization
:- load("../../ecl/gridvis.so").
:- ["../../include/gridvis.pl"].

      
%% ================================================================== %%
%%  PROCEDURES                                                        %%
%% ================================================================== %%


/**
 * fetch_order/1
 * Fetches an order from room R
 */
proc( fetch_order(R) ,
      [
        exogf_Update, 
        start_goto(R), stop_goto(R),
        exogf_Update,
        start_locate(P,R), stop_locate(P,R),
        start_take_order(P), stop_take_order(P),
        exogf_Update
      ]
    ).

/**
 * fetch_coffee/0
 * Returns to the kitchen, informs the chef to prepare coffee and takes this
 * coffee
 */
proc( fetch_coffee,
	  [
%	  	exogf_Update, 
	  	?( not( task = nil ) ),
	  	while( not( pos=kitchen),
	  		   [ 
	  		   	 start_goto(kitchen), 
	  		   	 stop_goto(kitchen),
	  		   	 exogf_Update
	  		   ]
	  		 ),	  	
	  	start_locate(P,kitchen), stop_locate(P,kitchen),
	  	?( P = chef ),
	  	% if not coffee_prepared
	  	% while ( not_coffee_prepared )
	  	% 	noop
	  	while( not( coffee_prepared = true ),
               [
                 ?( task = T ),
               	 start_place_order( T ), 
               	 stop_place_order( T )
               ]
              ),
		start_pickup(coffee), stop_pickup(coffee)
	  ]
	).

/**
 * deliver_coffee/0
 * Delivers an already picked up cup of coffee to the room the coffee request
 * was made
 */
proc( deliver_coffee,
	  [
%	  	exogf_Update, 
		?( task = R ),
		?( not( R = nil ) ),
		?( holding = coffee ),
        start_goto(R), 
	  	stop_goto(R),
	  	exogf_Update,
	    start_drop(coffee,R), 
	    stop_drop(coffee,R)
      ]
	).
	
/**
 * return/0
 * Returns to the kitchen
 */
proc( return,
	  [
        start_goto(kitchen), 
	  	stop_goto(kitchen),
	  	exogf_Update
	  ]
	).
	
proc( serve_request ,
    [
        ?( requests=[ H | _R ] ),
        fetch_order(H),
        fetch_coffee,
        deliver_coffee,
        return
    ]).

/**
 * service/0
 * Waits in the kitchen until a coffee request is issued in room R. Agent 
 * drives there, receives the order, fetches coffee in the kitchen and delives 
 * this back to room R.
 */
proc( service,
	[
        while( true,
            [
        	    exogf_Update,
                while( requests = [],
                    [ 
                        wait 
                    ]),
               serve_request
            ])		
      ]).
service :- testbed( service ).

s :- 
    setval( coffee_prepared, true ), 
    setval( real_requests, [ 8 ] ), 
    testbed( service ).
    
%% ================================================================== %%
%%  TESTING PROCEDURES                                                %%
%% ================================================================== %%

/**
 * wt
 *
 * The agent does nothing until a request occurs
 */
proc( wt,
	  [
	  	exogf_Update,      
        while( requests = [], beep )
	  ]).
wt :- testbed( wt ).

/**
 * wtr
 *
 * Related constraints: "move equals colli=scanning"
 * Related nonpreemptives: goto
 *
 * The agent does nothing until a request is issued; then agent teleports there
 *
 */
proc( wtr,
	  [
	  	exogf_Update,      
        while( requests = [], wait ),
        ?( requests = [ H | _T ] ),
        start_goto( H ),
        stop_goto( H )
	  ]).
wtr :- testbed( wtr ).

/**
 * wta
 *
 * Related constraints: "move equals colli=scanning"
 * Related nonpreemptives: goto
 *
 * Agent will start colli.scanning before starting to go to '1' and will stop
 * scanning right afterwards. Goto is nonpreemptive, thus you have to stop the 
 * action exogenously (during simulation by pressing 'e' while waiting). You 
 * could also interfere with the colli's state by pressing 'c' and selecting
 * both the colli and a new state from the lists displayed.
 */
proc( wta,
	  [
	  	exogf_Update,      
        start_goto( 1 ), 
        % nonpreemptive
        stop_goto( 1 )
	  ]).
wta :- testbed( wta ).

/**
 * wtb
 *
 * Related constraints: 
 * - move equals colli=scanning
 * - interfere begins beep
 * - interact during motor=idle
 * - move_arm after arm_calibrated
 * Related nonpreemptives: goto
 *
 * Does what wta does regarding goto and additionally: both beeps and makes the 
 * motor idle, before starting to pickup the cup and calibrated the arm before,
 * too.
 */
proc( wtb ,
      [ 
        exogf_Update,      
        start_goto( 1 ),     
        stop_goto( 1 ),      
        start_pickup( cup ), 
        stop_pickup( cup )   
      ]).
wtb :- testbed( wtb ).


/**
 * wtc
 *
 * Related constraints: 
 * - move equals colli=scanning
 * - interfere begins beep
 * - interact during motor=idle
 * - move_arm after arm_calibrated
 * Related nonpreemptives: goto
 *
 * Does what wtb does regarding goto and additionally beeps again for drop
 * (as the arm still is calibrated).
 */
proc( wtc ,
      [ 
        exogf_Update,      
        start_goto( 1 ),     
        stop_goto( 1 ),      
        start_pickup( cup ), 
        stop_pickup( cup ),
        start_goto( 2 ),     
        stop_goto( 2 ),  
        start_drop( cup, 2 ),
        stop_drop( cup, 2 )
      ]).
wtc :- testbed( wtc ).

proc( pgoto( X ), [ exogf_Update, start_goto( X ), stop_goto( X ) ] ).
proc( agoto, [ while( true, [ pgoto( 8 ), pgoto( kitchen ) ] ) ] ).
agoto :- testbed( agoto ).

/**
 * testbed/1
 * Holds if Proc is performed after everything is reset back to intial values
 */
testbed( Proc ) :-
    setval( real_coffee_prepared, false ),
    setval( real_requests, [] ),
    setval( real_pos, kitchen ),
    setval( real_active_action, nil ),
    setup_components, 
    setup_nonpreemptive_actions,
    vis,
    icp( Proc ).

    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                   CONSTRAINTS                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% constraint( a, before, b ).
% constraint( a, after, b ).
% constraint( a, meets, b ).
% constraint( a, metby, b ).
% constraint( a, begins, b ).
% constraint( a, ends, b ).
% constraint( a, overlaps, b ).
% constraint( a, overlappedby, b ).
% constraint( a, during, b ).
% constraint( a, contains, b ).
% constraint( a, equals, b ).

constraint( move, during, eq(colli,scanning) ).
constraint( move, equals, eq(motor,running) ).
constraint( interact, begins, beep ).
constraint( interact, during, eq(motor,idle) ).
constraint( move_arm, after, eq(arm,calibrating) ).
constraint( locate(_X,_Y), during, eq(motor,idle) ).


%% TESTING ONLY
%constraint( goto( _X ), meets, beep ).
%constraint( goto( _X ), during, scan ).
%constraint( move_arm, after, calibrate ).
% constraint( goto(_X), startedby, a ).
%constraint( goto(_X), starts, b ).
%constraint( goto(_X), metby, c ).
%constraint( goto(_X), meets, d ).
% -> NO solution if all five actions have to perform within eenv of _goto


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- write(" <-- loading agent.readylog done.\n").
