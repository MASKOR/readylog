%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 CONSTRAINTS                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

parent( PrimAct, CompAct ) :- starter( CompAct, PrimAct ) 
                              ; 
                              finisher( CompAct, PrimAct ).

todo( [], _, _, nil ).
todo( [H|T], A, S, Cond ) :-
  printColor( red, "  <Checking constraints>\n", [] ),
  printColor( red, "    H = %w\n", [H] ),
  printColor( red, "    T = %w\n", [T] ),
  printColor( red, "    A = %w\n", [A] ),
  printColor( red, "    S = %w\n", [S] ),
  H = [Ac,Pi,Tr],    
  printColor( red, "    Ac = %w\n", [Ac] ),
  printColor( red, "    Pi = %w\n", [Pi] ),
  printColor( red, "    Tr = %w\n", [Tr] ),
  (
    printColor( red, "    Cond = %w\n", [Cond] ),
    printColor( red, "    Testing if constraint '%w' holds.\n", [H] ) ,
    ( 
      holds( constraint( Ac, Pi, Tr, A), S ) -> 
        (
          printColor( red, "    Constraint '%w' holds.\n", [H] ) ,
          todo( T, A, S, Cond ) 
        )
      ;
      Cond = H
    )
  ),
  printColor( red, "  </Checking constraints>\n", [] ).
  
needs_attention( A, S, C ) :- 
    parent(A,Tr),
    constraints(Tr,L),
    todo(L,A,S,C),
    C\=nil,
    printDebug( blue, "  found unsatisfied constraint '%w'\n", [C]).
    
apply_constraint(E,Ac,Pi,Tr,S,E1,S1) :-
    printColor( red, "  <Apply Constraint>\n", [] ),
    printColor( red, "    Action     = %w\n", [E]),
    printColor( red, "    Constraint = %w %w %w\n", [Ac,Pi,Tr]),
    printColor( red, "    Situation  = %w\n", [S]),
    do_apply_constraint(E,Ac,Pi,Tr,S,E1,S1),
    printColor( red, "    E1*        = %w\n", [E1]),
    printColor( red, "    E_sub*     = %w\n", [E_sub]),
    printColor( red, "  </Apply Constraint>\n", [] ).

% Checks if the histories last action equals A. Maintaining my debugging
% sanity.
last_action_equals(A,S) :- S = [C|_], A=C.

do_apply_constraint(E,Ac,meets,Tr,S,E1,S1) :-
    printColor( green, "    <Apply MEETS>\n", [] ),
    printColor( green, "      E  = %w\n", [E]),
    printColor( green, "      Ac = %w\n", [Ac]),
    printColor( green, "      Tr = %w\n", [Tr]),
    printColor( green, "      S  = %w\n", [S]),
    ( 
      ( starter( Tr, E ) -> 
            (
                printColor( green, "      starter(%w) = %w.\n", [Tr,E] ),
                finisher( Ac, Af ),
                printColor( green, "      finisher(%w) = %w.\n", [Ac,Af] ),
                printColor( green, "      fetching last action\n", [] ),
                (
                    last_action_equals(Af,S) -> 
                        printColor( green, "      constraint '%w meets %w' is satisfied\n", [Ac,Tr] ) 
                        ; 
                        fluent( Ac, F ),
                        (
                            ( 
                                printColor( green, "      fluent(%w) = %w.\n", [Ac,F] ), 
                                holds( F=true, S ) 
                            )
                            ->
                            (
                                % Falls A bereits gilt: [wf(A-), E] an bestehenden
                                % Plan präfixen und wiedervorlegen
                                printColor( green, "      fluent '%w' holds.\n", [F] ),
                                P = [ Af, E ], % müsste eig. P = [ wf(Af), E ], sein
                                printDebug( green, "      prefix is '%w'\n", [P] )
                                , E1 = P
                                , S1 = S
                            )
                            ;
                            (
                                % Sonst: [A+,wf(A-),E] wiedervorlegen
                                printColor( green, "      fluent '%w' holds NOT.\n", [F] ),
                                starter( Ac, As ), 
                                P = [ As, Af, E], % müsste eig. P = [ As, wf(Af), E] sein
                                printDebug( green, "      prefix is '%w'\n", [P] )
                                , E1 = P 
                                , S1 = S
                            )
                        )
                )
            )            
            ;
            (
                printColor( green, "      action '%w' does not start trigger '%w'\n", [E,Tr]),
                printColor( green, "        => thus we don't care any further\n", []) 
            )
      ) 
    ),
    printColor( green, "    </Apply MEETS>\n", [] ).
    
do_apply_constraint(Alpha,A,before,B,S,D1,S1) :-
    (
        starter( B, Alpha ) ,
        starter( A, As ),
        finisher( A , Af ),
        fluent( A, F )
    )
    -> 
    (
        holds( F=true, S ) 
        ->
        D1 = [ Af, B ]      
        ;
        D1 = [ As, Af, B ]      
    ).
